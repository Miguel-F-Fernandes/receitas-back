// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamptz(6)
  text      String

  @@map("feedback")
}

model Person {
  id          Int                    @id @default(autoincrement())
  name        String
  user_id     Int?                   @unique()
  user        User?                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// ingredients this person has
  ingredients IngredientsOfAPerson[]

  @@map("people")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  salt        String
  login_until DateTime? @db.Timestamptz(6)
  person      Person?

  @@map("users")
}

model Recipe {
  id              Int                   @id @default(autoincrement())
  name            String                @unique
  steps           String
  image           String?
  decoration      String?
  alcohol_content Float?
  original_url    String?
  hardness        Int?
  sweetness       Int?
  calories        Int?
  serve_in        String?
  description     String?
  /// ingredients of this recipe
  ingredients     IngredientsInRecipe[]

  @@map("recipes")
}

enum ingredients_difficulty_enum {
  easy
  medium
  hard
}

model Ingredient {
  id         Int                          @id @default(autoincrement())
  name       String                       @unique
  price      Int?
  difficulty ingredients_difficulty_enum?
  /// recipes that use this ingredient
  recipes    IngredientsInRecipe[]
  /// people that have this ingredient
  people     IngredientsOfAPerson[]

  @@map("ingredients")
}

model IngredientsInRecipe {
  amount        Json
  ingredient_id Int
  ingredient    Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recipe_id     Int
  recipe        Recipe     @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([recipe_id, ingredient_id])
  @@index([ingredient_id])
  @@index([recipe_id])
  @@map("ingredients__recipes")
}

model IngredientsOfAPerson {
  ingredient_id Int
  ingredients   Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_id     Int
  person        Person     @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([person_id, ingredient_id])
  @@index([ingredient_id])
  @@index([person_id])
  @@map("people__ingredients")
}

model Glassware {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  image    String?
  capacity String?

  @@map("glassware")
}
